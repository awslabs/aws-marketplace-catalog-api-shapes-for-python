# coding: utf-8

"""
    AmiProduct_1_0_ChangeTypes

        Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AmiSource(BaseModel):
    """
    AmiSource
    """ # noqa: E501
    ami_id: Annotated[str, Field(strict=True)] = Field(alias="AmiId")
    access_role_arn: Annotated[str, Field(strict=True)] = Field(alias="AccessRoleArn")
    user_name: Annotated[str, Field(strict=True, max_length=100)] = Field(alias="UserName")
    scanning_port: Optional[Annotated[int, Field(le=65535, strict=True, ge=1)]] = Field(default=None, alias="ScanningPort")
    operating_system_name: Annotated[str, Field(strict=True, max_length=100)] = Field(alias="OperatingSystemName")
    operating_system_version: Annotated[str, Field(strict=True, max_length=100)] = Field(alias="OperatingSystemVersion")
    __properties: ClassVar[List[str]] = ["AmiId", "AccessRoleArn", "UserName", "ScanningPort", "OperatingSystemName", "OperatingSystemVersion"]

    @field_validator('ami_id')
    def ami_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^ami-([a-zA-Z0-9]{8}|[a-zA-Z0-9]{17})$", value):
            raise ValueError(r"must validate the regular expression /^ami-([a-zA-Z0-9]{8}|[a-zA-Z0-9]{17})$/")
        return value

    @field_validator('access_role_arn')
    def access_role_arn_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^arn:aws:iam::\d{12}:role\/[a-zA-Z_0-9+=,.@\-_\/]+$", value):
            raise ValueError(r"must validate the regular expression /^arn:aws:iam::\d{12}:role\/[a-zA-Z_0-9+=,.@\-_\/]+$/")
        return value

    @field_validator('user_name')
    def user_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[\w\-_]+$", value):
            raise ValueError(r"must validate the regular expression /^[\w\-_]+$/")
        return value

    @field_validator('operating_system_name')
    def operating_system_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\S+[\S\s]*", value):
            raise ValueError(r"must validate the regular expression /^\S+[\S\s]*/")
        return value

    @field_validator('operating_system_version')
    def operating_system_version_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\S+[\S\s]*", value):
            raise ValueError(r"must validate the regular expression /^\S+[\S\s]*/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AmiSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AmiSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AmiId": obj.get("AmiId"),
            "AccessRoleArn": obj.get("AccessRoleArn"),
            "UserName": obj.get("UserName"),
            "ScanningPort": obj.get("ScanningPort"),
            "OperatingSystemName": obj.get("OperatingSystemName"),
            "OperatingSystemVersion": obj.get("OperatingSystemVersion")
        })
        return _obj


