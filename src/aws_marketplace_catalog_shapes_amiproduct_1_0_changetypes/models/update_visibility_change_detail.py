# coding: utf-8

"""
    AmiProduct_1_0_ChangeTypes

        Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, field_validator
from pydantic import Field
from typing_extensions import Annotated
from aws_marketplace_catalog_shapes_amiproduct_1_0_changetypes.models.target_visibility import TargetVisibility
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UpdateVisibilityChangeDetail(BaseModel):
    """
    UpdateVisibilityChangeDetail
    """ # noqa: E501
    target_visibility: TargetVisibility = Field(alias="TargetVisibility")
    replacement_product_id: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="ReplacementProductId")
    __properties: ClassVar[List[str]] = ["TargetVisibility", "ReplacementProductId"]

    @field_validator('replacement_product_id')
    def replacement_product_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(prod-[a-zA-Z0-9]{13})|(prod-[a-zA-Z0-9]{25})|([0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})$", value):
            raise ValueError(r"must validate the regular expression /^(prod-[a-zA-Z0-9]{13})|(prod-[a-zA-Z0-9]{25})|([0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UpdateVisibilityChangeDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UpdateVisibilityChangeDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "TargetVisibility": obj.get("TargetVisibility"),
            "ReplacementProductId": obj.get("ReplacementProductId")
        })
        return _obj


