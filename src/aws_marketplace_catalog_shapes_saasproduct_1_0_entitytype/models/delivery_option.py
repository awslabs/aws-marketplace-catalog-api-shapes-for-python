# coding: utf-8

"""
    SaaSProduct_1_0_EntityType

        Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from aws_marketplace_catalog_shapes_saasproduct_1_0_entitytype.models.deployment_template import DeploymentTemplate
from aws_marketplace_catalog_shapes_saasproduct_1_0_entitytype.models.endpoint import Endpoint
from aws_marketplace_catalog_shapes_saasproduct_1_0_entitytype.models.targeting import Targeting
from typing import Optional, Set
from typing_extensions import Self

class DeliveryOption(BaseModel):
    """
    DeliveryOption
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="Id")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    fulfillment_url: Optional[StrictStr] = Field(default=None, alias="FulfillmentUrl")
    quick_launch_enabled: Optional[StrictBool] = Field(default=None, alias="QuickLaunchEnabled")
    launch_url: Optional[StrictStr] = Field(default=None, alias="LaunchUrl")
    deployment_templates: Optional[List[DeploymentTemplate]] = Field(default=None, alias="DeploymentTemplates")
    usage_instructions: Optional[StrictStr] = Field(default=None, alias="UsageInstructions")
    visibility: Optional[StrictStr] = Field(default=None, alias="Visibility")
    targeting: Optional[Targeting] = Field(default=None, alias="Targeting")
    api_type: Optional[StrictStr] = Field(default=None, alias="ApiType")
    compatible_services: Optional[List[StrictStr]] = Field(default=None, alias="CompatibleServices")
    endpoints: Optional[List[Endpoint]] = Field(default=None, alias="Endpoints")
    __properties: ClassVar[List[str]] = ["Id", "Type", "FulfillmentUrl", "QuickLaunchEnabled", "LaunchUrl", "DeploymentTemplates", "UsageInstructions", "Visibility", "Targeting", "ApiType", "CompatibleServices", "Endpoints"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeliveryOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in deployment_templates (list)
        _items = []
        if self.deployment_templates:
            for _item_deployment_templates in self.deployment_templates:
                if _item_deployment_templates:
                    _items.append(_item_deployment_templates.to_dict())
            _dict['DeploymentTemplates'] = _items
        # override the default output from pydantic by calling `to_dict()` of targeting
        if self.targeting:
            _dict['Targeting'] = self.targeting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in endpoints (list)
        _items = []
        if self.endpoints:
            for _item_endpoints in self.endpoints:
                if _item_endpoints:
                    _items.append(_item_endpoints.to_dict())
            _dict['Endpoints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeliveryOption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Id": obj.get("Id"),
            "Type": obj.get("Type"),
            "FulfillmentUrl": obj.get("FulfillmentUrl"),
            "QuickLaunchEnabled": obj.get("QuickLaunchEnabled"),
            "LaunchUrl": obj.get("LaunchUrl"),
            "DeploymentTemplates": [DeploymentTemplate.from_dict(_item) for _item in obj["DeploymentTemplates"]] if obj.get("DeploymentTemplates") is not None else None,
            "UsageInstructions": obj.get("UsageInstructions"),
            "Visibility": obj.get("Visibility"),
            "Targeting": Targeting.from_dict(obj["Targeting"]) if obj.get("Targeting") is not None else None,
            "ApiType": obj.get("ApiType"),
            "CompatibleServices": obj.get("CompatibleServices"),
            "Endpoints": [Endpoint.from_dict(_item) for _item in obj["Endpoints"]] if obj.get("Endpoints") is not None else None
        })
        return _obj


