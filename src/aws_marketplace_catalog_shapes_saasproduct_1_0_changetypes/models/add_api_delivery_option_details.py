# coding: utf-8

"""
    SaaSProduct_1_0_ChangeTypes

        Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from aws_marketplace_catalog_shapes_saasproduct_1_0_changetypes.models.api_endpoint import ApiEndpoint
from aws_marketplace_catalog_shapes_saasproduct_1_0_changetypes.models.api_type import ApiType
from aws_marketplace_catalog_shapes_saasproduct_1_0_changetypes.models.compatible_service import CompatibleService
from typing import Optional, Set
from typing_extensions import Self

class AddApiDeliveryOptionDetails(BaseModel):
    """
    AddApiDeliveryOptionDetails
    """ # noqa: E501
    api_type: ApiType = Field(alias="ApiType")
    quick_launch_enabled: StrictBool = Field(alias="QuickLaunchEnabled")
    compatible_services: Optional[Annotated[List[CompatibleService], Field(min_length=0, max_length=1)]] = Field(default=None, alias="CompatibleServices")
    fulfillment_url: Annotated[str, Field(min_length=8, strict=True, max_length=2048)] = Field(alias="FulfillmentUrl")
    usage_instructions: Annotated[str, Field(strict=True, max_length=30000)] = Field(alias="UsageInstructions")
    endpoints: Annotated[List[ApiEndpoint], Field(min_length=1, max_length=1)] = Field(alias="Endpoints")
    __properties: ClassVar[List[str]] = ["ApiType", "QuickLaunchEnabled", "CompatibleServices", "FulfillmentUrl", "UsageInstructions", "Endpoints"]

    @field_validator('fulfillment_url')
    def fulfillment_url_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"https:\/\/(www\.)?[-a-zA-Z0-9@._]{1,256}\.[a-zA-Z0-9()]{1,63}\b([-a-zA-Z0-9@_\+.\/\/]*)", value):
            raise ValueError(r"must validate the regular expression /https:\/\/(www\.)?[-a-zA-Z0-9@._]{1,256}\.[a-zA-Z0-9()]{1,63}\b([-a-zA-Z0-9@_\+.\/\/]*)/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddApiDeliveryOptionDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in endpoints (list)
        _items = []
        if self.endpoints:
            for _item_endpoints in self.endpoints:
                if _item_endpoints:
                    _items.append(_item_endpoints.to_dict())
            _dict['Endpoints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddApiDeliveryOptionDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ApiType": obj.get("ApiType"),
            "QuickLaunchEnabled": obj.get("QuickLaunchEnabled"),
            "CompatibleServices": obj.get("CompatibleServices"),
            "FulfillmentUrl": obj.get("FulfillmentUrl"),
            "UsageInstructions": obj.get("UsageInstructions"),
            "Endpoints": [ApiEndpoint.from_dict(_item) for _item in obj["Endpoints"]] if obj.get("Endpoints") is not None else None
        })
        return _obj


