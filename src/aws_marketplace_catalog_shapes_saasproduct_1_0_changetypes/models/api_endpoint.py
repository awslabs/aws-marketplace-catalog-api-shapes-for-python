# coding: utf-8

"""
    SaaSProduct_1_0_ChangeTypes

        Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from aws_marketplace_catalog_shapes_saasproduct_1_0_changetypes.models.api_schema import ApiSchema
from aws_marketplace_catalog_shapes_saasproduct_1_0_changetypes.models.authorization_type import AuthorizationType
from aws_marketplace_catalog_shapes_saasproduct_1_0_changetypes.models.integration_protocol import IntegrationProtocol
from typing import Optional, Set
from typing_extensions import Self

class ApiEndpoint(BaseModel):
    """
    ApiEndpoint
    """ # noqa: E501
    name: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, alias="Name")
    endpoint_url: Annotated[str, Field(min_length=8, strict=True, max_length=2048)] = Field(alias="EndpointUrl")
    description: Optional[Annotated[str, Field(strict=True, max_length=4000)]] = Field(default=None, alias="Description")
    authorization_types: Annotated[List[AuthorizationType], Field(min_length=1, max_length=2)] = Field(alias="AuthorizationTypes")
    schemas: Optional[Annotated[List[ApiSchema], Field(min_length=0, max_length=1)]] = Field(default=None, alias="Schemas")
    integration_protocols: Optional[Annotated[List[IntegrationProtocol], Field(min_length=0, max_length=2)]] = Field(default=None, alias="IntegrationProtocols")
    __properties: ClassVar[List[str]] = ["Name", "EndpointUrl", "Description", "AuthorizationTypes", "Schemas", "IntegrationProtocols"]

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[A-Za-z][a-zA-Z0-9-]+$", value):
            raise ValueError(r"must validate the regular expression /^[A-Za-z][a-zA-Z0-9-]+$/")
        return value

    @field_validator('endpoint_url')
    def endpoint_url_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"https:\/\/(www\.)?[-a-zA-Z0-9@._]{1,256}\.[a-zA-Z0-9()]{1,63}\b([-a-zA-Z0-9@_\+.\/\/]*)", value):
            raise ValueError(r"must validate the regular expression /https:\/\/(www\.)?[-a-zA-Z0-9@._]{1,256}\.[a-zA-Z0-9()]{1,63}\b([-a-zA-Z0-9@_\+.\/\/]*)/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiEndpoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in schemas (list)
        _items = []
        if self.schemas:
            for _item_schemas in self.schemas:
                if _item_schemas:
                    _items.append(_item_schemas.to_dict())
            _dict['Schemas'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in integration_protocols (list)
        _items = []
        if self.integration_protocols:
            for _item_integration_protocols in self.integration_protocols:
                if _item_integration_protocols:
                    _items.append(_item_integration_protocols.to_dict())
            _dict['IntegrationProtocols'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiEndpoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Name": obj.get("Name"),
            "EndpointUrl": obj.get("EndpointUrl"),
            "Description": obj.get("Description"),
            "AuthorizationTypes": obj.get("AuthorizationTypes"),
            "Schemas": [ApiSchema.from_dict(_item) for _item in obj["Schemas"]] if obj.get("Schemas") is not None else None,
            "IntegrationProtocols": [IntegrationProtocol.from_dict(_item) for _item in obj["IntegrationProtocols"]] if obj.get("IntegrationProtocols") is not None else None
        })
        return _obj


