# coding: utf-8

"""
    Offer_1_0

        Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from aws_marketplace_catalog_shapes_offer_1_0.models.pre_existing_agreement import PreExistingAgreement
from aws_marketplace_catalog_shapes_offer_1_0.models.rule import Rule
from aws_marketplace_catalog_shapes_offer_1_0.models.term import Term
from typing import Optional, Set
from typing_extensions import Self

class OfferEntityDetail(BaseModel):
    """
    OfferEntityDetail
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, alias="Description")
    id: Optional[StrictStr] = Field(default=None, alias="Id")
    state: Optional[StrictStr] = Field(default=None, alias="State")
    markup_percentage: Optional[StrictStr] = Field(default=None, alias="MarkupPercentage")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    pre_existing_agreement: Optional[PreExistingAgreement] = Field(default=None, alias="PreExistingAgreement")
    product_id: Optional[StrictStr] = Field(default=None, alias="ProductId")
    rules: Optional[List[Rule]] = Field(default=None, alias="Rules")
    terms: Optional[List[Term]] = Field(default=None, alias="Terms")
    __properties: ClassVar[List[str]] = ["Description", "Id", "State", "MarkupPercentage", "Name", "PreExistingAgreement", "ProductId", "Rules", "Terms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OfferEntityDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pre_existing_agreement
        if self.pre_existing_agreement:
            _dict['PreExistingAgreement'] = self.pre_existing_agreement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        _items = []
        if self.rules:
            for _item_rules in self.rules:
                if _item_rules:
                    _items.append(_item_rules.to_dict())
            _dict['Rules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in terms (list)
        _items = []
        if self.terms:
            for _item_terms in self.terms:
                if _item_terms:
                    _items.append(_item_terms.to_dict())
            _dict['Terms'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OfferEntityDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Description": obj.get("Description"),
            "Id": obj.get("Id"),
            "State": obj.get("State"),
            "MarkupPercentage": obj.get("MarkupPercentage"),
            "Name": obj.get("Name"),
            "PreExistingAgreement": PreExistingAgreement.from_dict(obj["PreExistingAgreement"]) if obj.get("PreExistingAgreement") is not None else None,
            "ProductId": obj.get("ProductId"),
            "Rules": [Rule.from_dict(_item) for _item in obj["Rules"]] if obj.get("Rules") is not None else None,
            "Terms": [Term.from_dict(_item) for _item in obj["Terms"]] if obj.get("Terms") is not None else None
        })
        return _obj


