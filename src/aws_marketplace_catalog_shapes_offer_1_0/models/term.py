# coding: utf-8

"""
    Offer_1_0

        Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from aws_marketplace_catalog_shapes_offer_1_0.models.document_item import DocumentItem
from aws_marketplace_catalog_shapes_offer_1_0.models.grant_item import GrantItem
from aws_marketplace_catalog_shapes_offer_1_0.models.rate_cards_item import RateCardsItem
from aws_marketplace_catalog_shapes_offer_1_0.models.schedule_item import ScheduleItem
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Term(BaseModel):
    """
    Term
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    currency_code: Optional[StrictStr] = Field(default=None, alias="CurrencyCode")
    approval_strategy: Optional[StrictStr] = Field(default=None, alias="ApprovalStrategy")
    expiration_duration: Optional[StrictStr] = Field(default=None, alias="ExpirationDuration")
    documents: Optional[List[DocumentItem]] = Field(default=None, alias="Documents")
    schedule: Optional[List[ScheduleItem]] = Field(default=None, alias="Schedule")
    duration: Optional[StrictStr] = Field(default=None, alias="Duration")
    grants: Optional[List[GrantItem]] = Field(default=None, alias="Grants")
    rate_cards: Optional[List[RateCardsItem]] = Field(default=None, alias="RateCards")
    billing_period: Optional[StrictStr] = Field(default=None, alias="BillingPeriod")
    price: Optional[StrictStr] = Field(default=None, alias="Price")
    refund_policy: Optional[StrictStr] = Field(default=None, alias="RefundPolicy")
    agreement_duration: Optional[StrictStr] = Field(default=None, alias="AgreementDuration")
    agreement_start_date: Optional[StrictStr] = Field(default=None, alias="AgreementStartDate")
    agreement_end_date: Optional[StrictStr] = Field(default=None, alias="AgreementEndDate")
    __properties: ClassVar[List[str]] = ["Type", "CurrencyCode", "ApprovalStrategy", "ExpirationDuration", "Documents", "Schedule", "Duration", "Grants", "RateCards", "BillingPeriod", "Price", "RefundPolicy", "AgreementDuration", "AgreementStartDate", "AgreementEndDate"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Term from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in documents (list)
        _items = []
        if self.documents:
            for _item in self.documents:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Documents'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in schedule (list)
        _items = []
        if self.schedule:
            for _item in self.schedule:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Schedule'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in grants (list)
        _items = []
        if self.grants:
            for _item in self.grants:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Grants'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rate_cards (list)
        _items = []
        if self.rate_cards:
            for _item in self.rate_cards:
                if _item:
                    _items.append(_item.to_dict())
            _dict['RateCards'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Term from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Type": obj.get("Type"),
            "CurrencyCode": obj.get("CurrencyCode"),
            "ApprovalStrategy": obj.get("ApprovalStrategy"),
            "ExpirationDuration": obj.get("ExpirationDuration"),
            "Documents": [DocumentItem.from_dict(_item) for _item in obj.get("Documents")] if obj.get("Documents") is not None else None,
            "Schedule": [ScheduleItem.from_dict(_item) for _item in obj.get("Schedule")] if obj.get("Schedule") is not None else None,
            "Duration": obj.get("Duration"),
            "Grants": [GrantItem.from_dict(_item) for _item in obj.get("Grants")] if obj.get("Grants") is not None else None,
            "RateCards": [RateCardsItem.from_dict(_item) for _item in obj.get("RateCards")] if obj.get("RateCards") is not None else None,
            "BillingPeriod": obj.get("BillingPeriod"),
            "Price": obj.get("Price"),
            "RefundPolicy": obj.get("RefundPolicy"),
            "AgreementDuration": obj.get("AgreementDuration"),
            "AgreementStartDate": obj.get("AgreementStartDate"),
            "AgreementEndDate": obj.get("AgreementEndDate")
        })
        return _obj


