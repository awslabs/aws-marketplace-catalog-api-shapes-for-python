# coding: utf-8

"""
    ContainerProduct_1_0_EntityType

        Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from aws_marketplace_catalog_shapes_containerproduct_1_0_entitytype.models.delivery_option_compatibility import DeliveryOptionCompatibility
from aws_marketplace_catalog_shapes_containerproduct_1_0_entitytype.models.environment_override_parameter import EnvironmentOverrideParameter
from aws_marketplace_catalog_shapes_containerproduct_1_0_entitytype.models.instructions import Instructions
from aws_marketplace_catalog_shapes_containerproduct_1_0_entitytype.models.override_parameter import OverrideParameter
from aws_marketplace_catalog_shapes_containerproduct_1_0_entitytype.models.recommendations import Recommendations
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DeliveryOption(BaseModel):
    """
    DeliveryOption
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="Id")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    source_id: Optional[StrictStr] = Field(default=None, alias="SourceId")
    title: Optional[StrictStr] = Field(default=None, alias="Title")
    short_description: Optional[StrictStr] = Field(default=None, alias="ShortDescription")
    is_recommended: Optional[StrictBool] = Field(default=None, alias="isRecommended")
    compatibility: Optional[DeliveryOptionCompatibility] = Field(default=None, alias="Compatibility")
    instructions: Optional[Instructions] = Field(default=None, alias="Instructions")
    recommendations: Optional[Recommendations] = Field(default=None, alias="Recommendations")
    visibility: Optional[StrictStr] = Field(default=None, alias="Visibility")
    quick_launch_enabled: Optional[StrictBool] = Field(default=None, alias="QuickLaunchEnabled")
    release_name: Optional[StrictStr] = Field(default=None, alias="ReleaseName")
    marketplace_service_account_name: Optional[StrictStr] = Field(default=None, alias="MarketplaceServiceAccountName")
    namespace: Optional[StrictStr] = Field(default=None, alias="Namespace")
    override_parameters: Optional[List[OverrideParameter]] = Field(default=None, alias="OverrideParameters")
    add_on_type: Optional[StrictStr] = Field(default=None, alias="AddOnType")
    environment_override_parameters: Optional[List[EnvironmentOverrideParameter]] = Field(default=None, alias="EnvironmentOverrideParameters")
    display_add_on_name: Optional[StrictStr] = Field(default=None, alias="DisplayAddOnName")
    add_on_name: Optional[StrictStr] = Field(default=None, alias="AddOnName")
    display_add_on_version: Optional[StrictStr] = Field(default=None, alias="DisplayAddOnVersion")
    add_on_version: Optional[StrictStr] = Field(default=None, alias="AddOnVersion")
    __properties: ClassVar[List[str]] = ["Id", "Type", "SourceId", "Title", "ShortDescription", "isRecommended", "Compatibility", "Instructions", "Recommendations", "Visibility", "QuickLaunchEnabled", "ReleaseName", "MarketplaceServiceAccountName", "Namespace", "OverrideParameters", "AddOnType", "EnvironmentOverrideParameters", "DisplayAddOnName", "AddOnName", "DisplayAddOnVersion", "AddOnVersion"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DeliveryOption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of compatibility
        if self.compatibility:
            _dict['Compatibility'] = self.compatibility.to_dict()
        # override the default output from pydantic by calling `to_dict()` of instructions
        if self.instructions:
            _dict['Instructions'] = self.instructions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recommendations
        if self.recommendations:
            _dict['Recommendations'] = self.recommendations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in override_parameters (list)
        _items = []
        if self.override_parameters:
            for _item in self.override_parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['OverrideParameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in environment_override_parameters (list)
        _items = []
        if self.environment_override_parameters:
            for _item in self.environment_override_parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['EnvironmentOverrideParameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DeliveryOption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Id": obj.get("Id"),
            "Type": obj.get("Type"),
            "SourceId": obj.get("SourceId"),
            "Title": obj.get("Title"),
            "ShortDescription": obj.get("ShortDescription"),
            "isRecommended": obj.get("isRecommended"),
            "Compatibility": DeliveryOptionCompatibility.from_dict(obj.get("Compatibility")) if obj.get("Compatibility") is not None else None,
            "Instructions": Instructions.from_dict(obj.get("Instructions")) if obj.get("Instructions") is not None else None,
            "Recommendations": Recommendations.from_dict(obj.get("Recommendations")) if obj.get("Recommendations") is not None else None,
            "Visibility": obj.get("Visibility"),
            "QuickLaunchEnabled": obj.get("QuickLaunchEnabled"),
            "ReleaseName": obj.get("ReleaseName"),
            "MarketplaceServiceAccountName": obj.get("MarketplaceServiceAccountName"),
            "Namespace": obj.get("Namespace"),
            "OverrideParameters": [OverrideParameter.from_dict(_item) for _item in obj.get("OverrideParameters")] if obj.get("OverrideParameters") is not None else None,
            "AddOnType": obj.get("AddOnType"),
            "EnvironmentOverrideParameters": [EnvironmentOverrideParameter.from_dict(_item) for _item in obj.get("EnvironmentOverrideParameters")] if obj.get("EnvironmentOverrideParameters") is not None else None,
            "DisplayAddOnName": obj.get("DisplayAddOnName"),
            "AddOnName": obj.get("AddOnName"),
            "DisplayAddOnVersion": obj.get("DisplayAddOnVersion"),
            "AddOnVersion": obj.get("AddOnVersion")
        })
        return _obj


