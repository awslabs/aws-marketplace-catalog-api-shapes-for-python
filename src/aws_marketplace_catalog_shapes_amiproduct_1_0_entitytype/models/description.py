# coding: utf-8

"""
    AmiProduct_1_0_EntityType

        Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Description(BaseModel):
    """
    Description
    """ # noqa: E501
    product_title: Optional[StrictStr] = Field(default=None, alias="ProductTitle")
    product_code: Optional[StrictStr] = Field(default=None, alias="ProductCode")
    short_description: Optional[StrictStr] = Field(default=None, alias="ShortDescription")
    manufacturer: Optional[StrictStr] = Field(default=None, alias="Manufacturer")
    long_description: Optional[StrictStr] = Field(default=None, alias="LongDescription")
    sku: Optional[StrictStr] = Field(default=None, alias="Sku")
    highlights: Optional[List[StrictStr]] = Field(default=None, alias="Highlights")
    associated_products: Optional[List[StrictStr]] = Field(default=None, alias="AssociatedProducts")
    search_keywords: Optional[List[StrictStr]] = Field(default=None, alias="SearchKeywords")
    visibility: Optional[StrictStr] = Field(default=None, alias="Visibility")
    categories: Optional[List[StrictStr]] = Field(default=None, alias="Categories")
    product_state: Optional[StrictStr] = Field(default=None, alias="ProductState")
    __properties: ClassVar[List[str]] = ["ProductTitle", "ProductCode", "ShortDescription", "Manufacturer", "LongDescription", "Sku", "Highlights", "AssociatedProducts", "SearchKeywords", "Visibility", "Categories", "ProductState"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Description from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Description from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ProductTitle": obj.get("ProductTitle"),
            "ProductCode": obj.get("ProductCode"),
            "ShortDescription": obj.get("ShortDescription"),
            "Manufacturer": obj.get("Manufacturer"),
            "LongDescription": obj.get("LongDescription"),
            "Sku": obj.get("Sku"),
            "Highlights": obj.get("Highlights"),
            "AssociatedProducts": obj.get("AssociatedProducts"),
            "SearchKeywords": obj.get("SearchKeywords"),
            "Visibility": obj.get("Visibility"),
            "Categories": obj.get("Categories"),
            "ProductState": obj.get("ProductState")
        })
        return _obj


