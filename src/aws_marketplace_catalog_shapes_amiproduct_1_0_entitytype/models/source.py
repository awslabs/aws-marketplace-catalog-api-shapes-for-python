# coding: utf-8

"""
    AmiProduct_1_0_EntityType

        Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from aws_marketplace_catalog_shapes_amiproduct_1_0_entitytype.models.compatibility import Compatibility
from aws_marketplace_catalog_shapes_amiproduct_1_0_entitytype.models.operating_system import OperatingSystem
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Source(BaseModel):
    """
    Source
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, alias="Id")
    type: Optional[StrictStr] = Field(default=None, alias="Type")
    template: Optional[StrictStr] = Field(default=None, alias="Template")
    nested_documents: Optional[List[StrictStr]] = Field(default=None, alias="NestedDocuments")
    consumed_sources: Optional[List[StrictStr]] = Field(default=None, alias="ConsumedSources")
    architecture_diagram: Optional[StrictStr] = Field(default=None, alias="ArchitectureDiagram")
    aws_dependent_services: Optional[List[StrictStr]] = Field(default=None, alias="AWSDependentServices")
    image: Optional[StrictStr] = Field(default=None, alias="Image")
    architecture: Optional[StrictStr] = Field(default=None, alias="Architecture")
    virtualization_type: Optional[StrictStr] = Field(default=None, alias="VirtualizationType")
    compatibility: Optional[Compatibility] = Field(default=None, alias="Compatibility")
    operating_system: Optional[OperatingSystem] = Field(default=None, alias="OperatingSystem")
    __properties: ClassVar[List[str]] = ["Id", "Type", "Template", "NestedDocuments", "ConsumedSources", "ArchitectureDiagram", "AWSDependentServices", "Image", "Architecture", "VirtualizationType", "Compatibility", "OperatingSystem"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Source from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of compatibility
        if self.compatibility:
            _dict['Compatibility'] = self.compatibility.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operating_system
        if self.operating_system:
            _dict['OperatingSystem'] = self.operating_system.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Source from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Id": obj.get("Id"),
            "Type": obj.get("Type"),
            "Template": obj.get("Template"),
            "NestedDocuments": obj.get("NestedDocuments"),
            "ConsumedSources": obj.get("ConsumedSources"),
            "ArchitectureDiagram": obj.get("ArchitectureDiagram"),
            "AWSDependentServices": obj.get("AWSDependentServices"),
            "Image": obj.get("Image"),
            "Architecture": obj.get("Architecture"),
            "VirtualizationType": obj.get("VirtualizationType"),
            "Compatibility": Compatibility.from_dict(obj.get("Compatibility")) if obj.get("Compatibility") is not None else None,
            "OperatingSystem": OperatingSystem.from_dict(obj.get("OperatingSystem")) if obj.get("OperatingSystem") is not None else None
        })
        return _obj


