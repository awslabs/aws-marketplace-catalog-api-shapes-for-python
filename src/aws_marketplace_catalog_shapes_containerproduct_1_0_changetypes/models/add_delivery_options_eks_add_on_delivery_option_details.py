# coding: utf-8

"""
    ContainerProduct_1_0_ChangeTypes

        Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from aws_marketplace_catalog_shapes_containerproduct_1_0_changetypes.models.environment_override_parameter import EnvironmentOverrideParameter
from typing import Optional, Set
from typing_extensions import Self

class AddDeliveryOptionsEksAddOnDeliveryOptionDetails(BaseModel):
    """
    AddDeliveryOptionsEksAddOnDeliveryOptionDetails
    """ # noqa: E501
    description: Annotated[str, Field(strict=True, max_length=1000)] = Field(alias="Description")
    usage_instructions: Annotated[str, Field(strict=True, max_length=4000)] = Field(alias="UsageInstructions")
    container_images: Annotated[List[Annotated[str, Field(strict=True, max_length=1000)]], Field(min_length=1, max_length=50)] = Field(alias="ContainerImages")
    helm_chart_uri: Annotated[str, Field(strict=True, max_length=1000)] = Field(alias="HelmChartUri")
    add_on_name: Annotated[str, Field(min_length=3, strict=True, max_length=64)] = Field(alias="AddOnName")
    add_on_version: Annotated[str, Field(min_length=3, strict=True, max_length=50)] = Field(alias="AddOnVersion")
    add_on_type: Annotated[str, Field(min_length=3, strict=True, max_length=100)] = Field(alias="AddOnType")
    compatible_kubernetes_versions: Annotated[List[Annotated[str, Field(strict=True, max_length=10)]], Field(min_length=1, max_length=30)] = Field(alias="CompatibleKubernetesVersions")
    supported_architectures: Annotated[List[Annotated[str, Field(strict=True, max_length=5)]], Field(min_length=1, max_length=2)] = Field(alias="SupportedArchitectures")
    namespace: Annotated[str, Field(strict=True, max_length=63)] = Field(alias="Namespace")
    environment_override_parameters: Optional[Annotated[List[EnvironmentOverrideParameter], Field(min_length=0, max_length=15)]] = Field(default=None, alias="EnvironmentOverrideParameters")
    __properties: ClassVar[List[str]] = ["Description", "UsageInstructions", "ContainerImages", "HelmChartUri", "AddOnName", "AddOnVersion", "AddOnType", "CompatibleKubernetesVersions", "SupportedArchitectures", "Namespace", "EnvironmentOverrideParameters"]

    @field_validator('description')
    def description_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\S+[\S\s]*", value):
            raise ValueError(r"must validate the regular expression /^\S+[\S\s]*/")
        return value

    @field_validator('usage_instructions')
    def usage_instructions_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\S+[\S\s]*", value):
            raise ValueError(r"must validate the regular expression /^\S+[\S\s]*/")
        return value

    @field_validator('helm_chart_uri')
    def helm_chart_uri_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d{12}\.dkr\.ecr\.[a-z0-9-]{4,24}\.amazonaws\.com\/\S+", value):
            raise ValueError(r"must validate the regular expression /^\d{12}\.dkr\.ecr\.[a-z0-9-]{4,24}\.amazonaws\.com\/\S+/")
        return value

    @field_validator('add_on_name')
    def add_on_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Za-z0-9]{1,1}[a-zA-Z0-9\-]{1,62}[a-zA-Z0-9]$", value):
            raise ValueError(r"must validate the regular expression /^[A-Za-z0-9]{1,1}[a-zA-Z0-9\-]{1,62}[a-zA-Z0-9]$/")
        return value

    @field_validator('add_on_version')
    def add_on_version_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^((0|[1-9]\d*)\.){2}(0|[1-9]\d*)$", value):
            raise ValueError(r"must validate the regular expression /^((0|[1-9]\d*)\.){2}(0|[1-9]\d*)$/")
        return value

    @field_validator('add_on_type')
    def add_on_type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?!.*--)[a-z][-a-z]+[a-z]$", value):
            raise ValueError(r"must validate the regular expression /^(?!.*--)[a-z][-a-z]+[a-z]$/")
        return value

    @field_validator('namespace')
    def namespace_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z0-9][-a-z0-9]{1,61}[a-z0-9]$", value):
            raise ValueError(r"must validate the regular expression /^[a-z0-9][-a-z0-9]{1,61}[a-z0-9]$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddDeliveryOptionsEksAddOnDeliveryOptionDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in environment_override_parameters (list)
        _items = []
        if self.environment_override_parameters:
            for _item_environment_override_parameters in self.environment_override_parameters:
                if _item_environment_override_parameters:
                    _items.append(_item_environment_override_parameters.to_dict())
            _dict['EnvironmentOverrideParameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddDeliveryOptionsEksAddOnDeliveryOptionDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Description": obj.get("Description"),
            "UsageInstructions": obj.get("UsageInstructions"),
            "ContainerImages": obj.get("ContainerImages"),
            "HelmChartUri": obj.get("HelmChartUri"),
            "AddOnName": obj.get("AddOnName"),
            "AddOnVersion": obj.get("AddOnVersion"),
            "AddOnType": obj.get("AddOnType"),
            "CompatibleKubernetesVersions": obj.get("CompatibleKubernetesVersions"),
            "SupportedArchitectures": obj.get("SupportedArchitectures"),
            "Namespace": obj.get("Namespace"),
            "EnvironmentOverrideParameters": [EnvironmentOverrideParameter.from_dict(_item) for _item in obj["EnvironmentOverrideParameters"]] if obj.get("EnvironmentOverrideParameters") is not None else None
        })
        return _obj


