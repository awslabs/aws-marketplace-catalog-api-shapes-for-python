# coding: utf-8

"""
    ContainerProduct_1_0_ChangeTypes

        Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, field_validator
from pydantic import Field
from typing_extensions import Annotated
from aws_marketplace_catalog_shapes_containerproduct_1_0_changetypes.models.deployment_resource import DeploymentResource
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UpdateDeliveryOptionsEcrDeliveryOptionDetails(BaseModel):
    """
    UpdateDeliveryOptionsEcrDeliveryOptionDetails
    """ # noqa: E501
    description: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = Field(default=None, alias="Description")
    usage_instructions: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=4000)]] = Field(default=None, alias="UsageInstructions")
    container_images: Optional[Annotated[List[Annotated[str, Field(strict=True, max_length=1000)]], Field(min_length=1, max_length=50)]] = Field(default=None, alias="ContainerImages")
    compatible_services: Optional[Annotated[List[Annotated[str, Field(strict=True)]], Field(min_length=1, max_length=4)]] = Field(default=None, alias="CompatibleServices")
    deployment_resources: Optional[Annotated[List[DeploymentResource], Field(min_length=0, max_length=4)]] = Field(default=None, alias="DeploymentResources")
    delivery_option_title: Optional[Annotated[str, Field(strict=True, max_length=72)]] = Field(default=None, alias="DeliveryOptionTitle")
    __properties: ClassVar[List[str]] = ["Description", "UsageInstructions", "ContainerImages", "CompatibleServices", "DeploymentResources", "DeliveryOptionTitle"]

    @field_validator('description')
    def description_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\S+[\S\s]*", value):
            raise ValueError(r"must validate the regular expression /^\S+[\S\s]*/")
        return value

    @field_validator('usage_instructions')
    def usage_instructions_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\S+[\S\s]*", value):
            raise ValueError(r"must validate the regular expression /^\S+[\S\s]*/")
        return value

    @field_validator('delivery_option_title')
    def delivery_option_title_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^\S+[\S\s]*", value):
            raise ValueError(r"must validate the regular expression /^\S+[\S\s]*/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UpdateDeliveryOptionsEcrDeliveryOptionDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in deployment_resources (list)
        _items = []
        if self.deployment_resources:
            for _item in self.deployment_resources:
                if _item:
                    _items.append(_item.to_dict())
            _dict['DeploymentResources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of UpdateDeliveryOptionsEcrDeliveryOptionDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Description": obj.get("Description"),
            "UsageInstructions": obj.get("UsageInstructions"),
            "ContainerImages": obj.get("ContainerImages"),
            "CompatibleServices": obj.get("CompatibleServices"),
            "DeploymentResources": [DeploymentResource.from_dict(_item) for _item in obj.get("DeploymentResources")] if obj.get("DeploymentResources") is not None else None,
            "DeliveryOptionTitle": obj.get("DeliveryOptionTitle")
        })
        return _obj


