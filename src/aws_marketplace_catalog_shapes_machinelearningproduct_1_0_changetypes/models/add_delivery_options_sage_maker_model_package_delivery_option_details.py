# coding: utf-8

"""
    MachineLearningProduct_1_0_ChangeTypes

        Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from aws_marketplace_catalog_shapes_machinelearningproduct_1_0_changetypes.models.input_properties import InputProperties
from aws_marketplace_catalog_shapes_machinelearningproduct_1_0_changetypes.models.output_properties import OutputProperties
from aws_marketplace_catalog_shapes_machinelearningproduct_1_0_changetypes.models.sage_maker_model_package_recommended_instance_types import SageMakerModelPackageRecommendedInstanceTypes
from typing import Optional, Set
from typing_extensions import Self

class AddDeliveryOptionsSageMakerModelPackageDeliveryOptionDetails(BaseModel):
    """
    AddDeliveryOptionsSageMakerModelPackageDeliveryOptionDetails
    """ # noqa: E501
    usage_instructions: Annotated[str, Field(strict=True, max_length=10000)] = Field(alias="UsageInstructions")
    sample_notebook_url: Annotated[str, Field(strict=True, max_length=2000)] = Field(alias="SampleNotebookUrl")
    repository_url: Annotated[str, Field(strict=True, max_length=2000)] = Field(alias="RepositoryUrl")
    input_properties: InputProperties = Field(alias="InputProperties")
    output_properties: OutputProperties = Field(alias="OutputProperties")
    recommended_instance_types: SageMakerModelPackageRecommendedInstanceTypes = Field(alias="RecommendedInstanceTypes")
    sage_maker_model_package_arn: Annotated[str, Field(strict=True)] = Field(alias="SageMakerModelPackageArn")
    access_role_arn: Annotated[str, Field(strict=True)] = Field(alias="AccessRoleArn")
    __properties: ClassVar[List[str]] = ["UsageInstructions", "SampleNotebookUrl", "RepositoryUrl", "InputProperties", "OutputProperties", "RecommendedInstanceTypes", "SageMakerModelPackageArn", "AccessRoleArn"]

    @field_validator('sample_notebook_url')
    def sample_notebook_url_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^https:\/\/(www\.)?[-a-zA-Z0-9@._]{1,256}\.[a-zA-Z0-9()]{2,63}\b([-a-zA-Z0-9@_+.\/]*)", value):
            raise ValueError(r"must validate the regular expression /^https:\/\/(www\.)?[-a-zA-Z0-9@._]{1,256}\.[a-zA-Z0-9()]{2,63}\b([-a-zA-Z0-9@_+.\/]*)/")
        return value

    @field_validator('repository_url')
    def repository_url_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^https:\/\/(www\.)?[-a-zA-Z0-9@._]{1,256}\.[a-zA-Z0-9()]{2,63}\b([-a-zA-Z0-9@_+.\/]*)", value):
            raise ValueError(r"must validate the regular expression /^https:\/\/(www\.)?[-a-zA-Z0-9@._]{1,256}\.[a-zA-Z0-9()]{2,63}\b([-a-zA-Z0-9@_+.\/]*)/")
        return value

    @field_validator('sage_maker_model_package_arn')
    def sage_maker_model_package_arn_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^arn:aws:sagemaker:[a-z0-9-]{4,24}:[0-9]{12}:model-package\/\S{1,2048}$", value):
            raise ValueError(r"must validate the regular expression /^arn:aws:sagemaker:[a-z0-9-]{4,24}:[0-9]{12}:model-package\/\S{1,2048}$/")
        return value

    @field_validator('access_role_arn')
    def access_role_arn_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^arn:aws:iam::\d{12}:role(\/[A-Za-z0-9_+=,.@-]+)?$", value):
            raise ValueError(r"must validate the regular expression /^arn:aws:iam::\d{12}:role(\/[A-Za-z0-9_+=,.@-]+)?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddDeliveryOptionsSageMakerModelPackageDeliveryOptionDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of input_properties
        if self.input_properties:
            _dict['InputProperties'] = self.input_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output_properties
        if self.output_properties:
            _dict['OutputProperties'] = self.output_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recommended_instance_types
        if self.recommended_instance_types:
            _dict['RecommendedInstanceTypes'] = self.recommended_instance_types.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddDeliveryOptionsSageMakerModelPackageDeliveryOptionDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "UsageInstructions": obj.get("UsageInstructions"),
            "SampleNotebookUrl": obj.get("SampleNotebookUrl"),
            "RepositoryUrl": obj.get("RepositoryUrl"),
            "InputProperties": InputProperties.from_dict(obj["InputProperties"]) if obj.get("InputProperties") is not None else None,
            "OutputProperties": OutputProperties.from_dict(obj["OutputProperties"]) if obj.get("OutputProperties") is not None else None,
            "RecommendedInstanceTypes": SageMakerModelPackageRecommendedInstanceTypes.from_dict(obj["RecommendedInstanceTypes"]) if obj.get("RecommendedInstanceTypes") is not None else None,
            "SageMakerModelPackageArn": obj.get("SageMakerModelPackageArn"),
            "AccessRoleArn": obj.get("AccessRoleArn")
        })
        return _obj


