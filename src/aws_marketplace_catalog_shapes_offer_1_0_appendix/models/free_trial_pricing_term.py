# coding: utf-8

"""
    Offer_1_0_Appendix

        Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, field_validator
from pydantic import Field
from typing_extensions import Annotated
from aws_marketplace_catalog_shapes_offer_1_0_appendix.models.free_trial_pricing_term_type import FreeTrialPricingTermType
from aws_marketplace_catalog_shapes_offer_1_0_appendix.models.grant_item import GrantItem
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FreeTrialPricingTerm(BaseModel):
    """
    FreeTrialPricingTerm
    """ # noqa: E501
    type: FreeTrialPricingTermType = Field(alias="Type")
    duration: Annotated[str, Field(strict=True)] = Field(alias="Duration")
    grants: Annotated[List[GrantItem], Field(min_length=1, max_length=800)] = Field(alias="Grants")
    __properties: ClassVar[List[str]] = ["Type", "Duration", "Grants"]

    @field_validator('duration')
    def duration_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^P(?=.)(\d+Y)?(\d+M)?(\d+D)?$", value):
            raise ValueError(r"must validate the regular expression /^P(?=.)(\d+Y)?(\d+M)?(\d+D)?$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FreeTrialPricingTerm from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in grants (list)
        _items = []
        if self.grants:
            for _item in self.grants:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Grants'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FreeTrialPricingTerm from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Type": obj.get("Type"),
            "Duration": obj.get("Duration"),
            "Grants": [GrantItem.from_dict(_item) for _item in obj.get("Grants")] if obj.get("Grants") is not None else None
        })
        return _obj


