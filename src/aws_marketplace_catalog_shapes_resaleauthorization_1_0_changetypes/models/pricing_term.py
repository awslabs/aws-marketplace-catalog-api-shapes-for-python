# coding: utf-8

"""
    ResaleAuthorization_1_0_ChangeTypes

        Copyright 2024 Amazon.com, Inc. or its affiliates. All Rights Reserved. 

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, field_validator
from pydantic import Field
from typing_extensions import Annotated
from aws_marketplace_catalog_shapes_resaleauthorization_1_0_changetypes.models.grant import Grant
from aws_marketplace_catalog_shapes_resaleauthorization_1_0_changetypes.models.pricing_term_currency_code import PricingTermCurrencyCode
from aws_marketplace_catalog_shapes_resaleauthorization_1_0_changetypes.models.pricing_term_type import PricingTermType
from aws_marketplace_catalog_shapes_resaleauthorization_1_0_changetypes.models.rate_cards import RateCards
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PricingTerm(BaseModel):
    """
    Price, Grants, and Period are required for ResaleFixedUpfrontPricingTerm. RateCards is required for ResaleConfigurableUpfrontPricingTerm and ResaleUsageBasedPricingTermRateCard.
    """ # noqa: E501
    type: PricingTermType = Field(alias="Type")
    currency_code: PricingTermCurrencyCode = Field(alias="CurrencyCode")
    rate_cards: Optional[Annotated[List[RateCards], Field(min_length=1, max_length=5)]] = Field(default=None, alias="RateCards")
    price: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="Price")
    grants: Optional[Annotated[List[Grant], Field(min_length=1, max_length=200)]] = Field(default=None, alias="Grants")
    duration: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, alias="Duration")
    __properties: ClassVar[List[str]] = ["Type", "CurrencyCode", "RateCards", "Price", "Grants", "Duration"]

    @field_validator('price')
    def price_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^((100000000(\.0{0,3})?)|(\d{1,8}(\.\d{0,3})?))$", value):
            raise ValueError(r"must validate the regular expression /^((100000000(\.0{0,3})?)|(\d{1,8}(\.\d{0,3})?))$/")
        return value

    @field_validator('duration')
    def duration_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^P(?=.)(\d+Y)?(\d+M)?(\d+D)?$", value):
            raise ValueError(r"must validate the regular expression /^P(?=.)(\d+Y)?(\d+M)?(\d+D)?$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PricingTerm from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in rate_cards (list)
        _items = []
        if self.rate_cards:
            for _item in self.rate_cards:
                if _item:
                    _items.append(_item.to_dict())
            _dict['RateCards'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in grants (list)
        _items = []
        if self.grants:
            for _item in self.grants:
                if _item:
                    _items.append(_item.to_dict())
            _dict['Grants'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PricingTerm from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Type": obj.get("Type"),
            "CurrencyCode": obj.get("CurrencyCode"),
            "RateCards": [RateCards.from_dict(_item) for _item in obj.get("RateCards")] if obj.get("RateCards") is not None else None,
            "Price": obj.get("Price"),
            "Grants": [Grant.from_dict(_item) for _item in obj.get("Grants")] if obj.get("Grants") is not None else None,
            "Duration": obj.get("Duration")
        })
        return _obj


